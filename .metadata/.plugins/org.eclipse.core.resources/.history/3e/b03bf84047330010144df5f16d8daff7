package com.demo;

import java.util.List;
import java.util.Scanner;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.PropertySource;

import com.kruthik.petistan.dto.OwnerDTO;
import com.kruthik.petistan.dto.PetDTO;
import com.kruthik.petistan.service.OwnerService;
import com.kruthik.petistan.service.PetService;
import com.kruthik.petsitan.util.InputUtil;

@SpringBootApplication(scanBasePackages = "com.kruthik")
@PropertySource("classpath:messages.properties")
public class PetistanApplication implements CommandLineRunner {

	private final OwnerService ownerService;
	private final PetService petService;
	private static final Logger LOGGER = LoggerFactory.getLogger(PetistanApplication.class);

	public PetistanApplication(OwnerService ownerService, PetService petService) {
		this.ownerService = ownerService;
		this.petService = petService;
	}

	public static void main(String[] args) {
		SpringApplication.run(PetistanApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		try (Scanner sc = new Scanner(System.in)) {

			do {
				System.out.println("***\tPETISTAN\t***");
				int menuOption = InputUtil.menuOptions(sc);
				switch (menuOption) {

				case 1:
					OwnerDTO newOwner = InputUtil.saveOwner(sc);
					PetDTO newPet = InputUtil.savePet(sc);
					newOwner.setPetDTO(newPet);
					ownerService.saveOwner(newOwner);
					System.out.println("Owner Registered Successfully...");
					break;
				case 2:
					System.out.println("1...");
					int ownerId = InputUtil.ownerIdToOperate(sc);
					OwnerDTO owner = ownerService.findOwnerById(ownerId);
					System.out.println("Owner fetched Successfully...");
					System.out.println(owner);
					break;
				case 3:
					ownerId = InputUtil.ownerIdToOperate(sc);
					String updatePetName = InputUtil.updatePetName(sc);
					ownerService.updateOwner(ownerId, updatePetName);
					System.out.println("Pet details has been Updated Successfully...");
					break;
				case 4:
					List<OwnerDTO> allOwners = ownerService.findAllOwners();
					System.out.println("There are " + allOwners.size() + " Owners.");
					allOwners.forEach(System.out::println);
					break;
				case 5:
					int petId = InputUtil.petIdToOperate(sc);
					PetDTO pet = petService.findPetById(petId);
					System.out.println(pet);
					break;
				case 6:
					ownerId = InputUtil.ownerIdToOperate(sc);
					ownerService.deleteOwner(ownerId);
					System.out.println("Owner deleted Successfully...");
					break;
				default:
					System.out.println("Invalid option selected");
				}

			} while (InputUtil.wantToContinue(sc));

		} catch (Exception e) {

		}
	}

}
