package com.kruthik.petistan.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Value;

import com.kruthik.petistan.dto.OwnerDTO;
import com.kruthik.petistan.exceptions.DuplicateOwnerIdException;
import com.kruthik.petistan.exceptions.OwnerNotFoundException;
import com.kruthik.petistan.exceptions.PetNotFoundException;
import com.kruthik.petistan.repositories.OwnerRepository;
import com.kruthik.petistan.repositories.PetRepository;
import com.kruthik.petistan.service.OwnerService;

public class OwnerServiceImpl implements OwnerService {
	private final OwnerRepository ownerRepository;
	private final String message;

	public OwnerServiceImpl(OwnerRepository ownerRepository, @Value("${owner.not.found}") String message) {
		this.ownerRepository = ownerRepository;
		this.message = message;
	}

	@Override
	public void saveOwner(OwnerDTO owner) throws DuplicateOwnerIdException {
		if(ownerRepository.findOwnerById(owner.getOwnerId()).isPresent()) {
			throw new DuplicateOwnerIdException("");
		}
	}

	@Override
	public OwnerDTO findOwnerById(int ownerId) throws OwnerNotFoundException {
		return ownerRepository.findOwnerById(ownerId).orElseThrow(() -> new PetNotFoundException(String.format(message, ownerId)));
	}

	@Override
	public void updateOwner(int ownerId, String petNewName) throws OwnerNotFoundException {

	}

	@Override
	public void deleteOwner(int ownerId) throws OwnerNotFoundException {

	}

	@Override
	public List<OwnerDTO> findAllOwners() {
		return null;
	}

}
